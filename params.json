{"name":"Simple WebSocket Server","tagline":"","body":"<h2>A Simple Websocket Server written in Python</h2>\r\n\r\n- RFC 6455 (All latest browsers)\r\n- TLS/SSL out of the box\r\n- Passes Autobahn Websocket Testsuite\r\n\r\n<h4>Echo Server Example</h4>\r\n`````python\r\nclass SimpleEcho(WebSocket):\r\n\r\n    def handleMessage(self):\r\n        # echo message back to client\r\n        self.sendMessage(self.data)\r\n    \r\n    def handleConnected(self):\r\n        print self.address, 'connected'\r\n          \r\n    def handleClose(self):\r\n        print self.address, 'closed'\r\n\r\nserver = SimpleWebSocketServer('', 8000, SimpleEcho)\r\nserver.serveforever()\r\n`````\r\n\r\nOpen <i>websocket.html</i> and connect to the server.\r\n\r\n<h4>Chat Server Example</h4>\r\n`````python\r\nclients = []\r\nclass SimpleChat(WebSocket):\r\n\r\n    def handleMessage(self):\r\n       for client in clients:\r\n          if client != self:\r\n             client.sendMessage(self.address[0] + ' - ' + self.data)\r\n\r\n    def handleConnected(self):\r\n       print self.address, 'connected'\r\n       for client in clients:\r\n          client.sendMessage(self.address[0] + u' - connected')\r\n       clients.append(self)\r\n\r\n    def handleClose(self):\r\n       clients.remove(self)\r\n       print self.address, 'closed'\r\n       for client in clients:\r\n          client.sendMessage(self.address[0] + u' - disconnected')\r\n\r\nserver = SimpleWebSocketServer('', 8000, SimpleChat)\r\nserver.serveforever()\r\n`````\r\nOpen multiple <i>websocket.html</i> and connect to the server.\r\n\r\n<h4>Want to get up and running faster?</h4>\r\n\r\nThere is an example which provides a simple echo and chat server\r\n\r\nEcho Server\r\n\r\n    python SimpleExampleServer.py --example echo\r\n\r\nChat Server (open up multiple <i>websocket.html</i> files)\r\n    \r\n    python SimpleExampleServer.py --example chat\r\n\r\n\r\n<h4>TLS/SSL Example</h4>\r\n\r\n1) Generate a certificate with key\r\n\r\n    openssl req -new -x509 -days 365 -nodes -out cert.pem -keyout cert.pem\r\n    \r\n2) Run the secure TSL/SSL server (in this case the cert.pem file is in the same directory)\r\n\r\n    python SimpleExampleServer.py --example chat --ssl 1 --cert ./cert.pem\r\n    \r\n3) Offer the certificate to the browser by serving <i>websocket.html</i> through https. \r\nThe HTTPS server will look for cert.pem in the local directory. \r\nEnsure the <i>websocket.html</i> is also in the same directory to where the server is run. \r\n\r\n    sudo python SimpleHTTPSServer.py\r\n\r\n4) Open a web browser to: <i>https://localhost:443/websocket.html</i>\r\n\r\n5) Change <i>ws://localhost:8000/</i> to <i>wss://localhost:8000</i> and click connect. \r\n\r\nNote: if you are having problems connecting, ensure that the certificate is added in your browser against the exception <i>https://localhost:8000</i> or whatever host:port pair you want to connect to. \r\n\r\n<h4>For the Programmers</h4>\r\n\r\nhandleConnected: called when handskake is complete\r\n - self.address: TCP address port tuple of the endpoint\r\n\r\nhandleClose: called when the endpoint is closed or there is an error\r\n\r\nhandleMessage: gets called when there is an incoming message from the client endpoint\r\n - self.opcode: the WebSocket frame type (STREAM, TEXT, BINARY)\r\n - self.data: bytearray (BINARY frame) or unicode payload (TEXT frame)  \r\n - self.request: HTTP details from the WebSocket handshake (refer to BaseHTTPRequestHandler)\r\n \r\nsendMessage: send some text or binary data to the client endpoint\r\n - sending data as a unicode object will send a TEXT frame\r\n - sending data as a bytearray object will send a BINARY frame\r\n \r\nsendClose: send close frame to endpoint\r\n\r\n\r\n---------------------\r\nThe MIT License (MIT)\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}